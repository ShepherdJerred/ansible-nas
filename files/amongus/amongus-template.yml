Parameters:
  LatestAl2AmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
Resources:
  LifecyclePolicy:
    Type: AWS::DLM::LifecyclePolicy
    Properties:
      Description: Backup for among us volumes
      State: ENABLED
      ExecutionRoleArn: arn:aws:iam::692594597524:role/service-role/AWSDataLifecycleManagerDefaultRole
      PolicyDetails:
        ResourceTypes:
          - VOLUME
        TargetTags:
          - Key: backup
            Value: amongus
        Schedules:
          - Name: Among Us Snapshots
            CreateRule:
              Interval: 12
              IntervalUnit: HOURS
              Times:
                - "00:00"
            RetainRule:
              Count: 2
  DataVolume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: us-east-1c
      Size: 10
      VolumeType: gp2
      Tags:
        - Key: backup
          Value: amongus
  Instance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: Personal
      AvailabilityZone: us-east-1c
      ImageId: !Ref LatestAl2AmiId
      DisableApiTermination: false
      InstanceType: m4.xlarge
      Monitoring: true
      IamInstanceProfile: EC2-CloudWatch-Logs
      SecurityGroupIds:
        - !GetAtt SshSecurityGroup.GroupId
        - !GetAtt AmongUsSecurityGroup.GroupId
        - !GetAtt EgressSecurityGroup.GroupId
      SubnetId: !Ref Subnet
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
      UserData:
        Fn::Base64: !Sub |
          mkdir /server
          mkdir /server/data

          blkid --match-token TYPE=xfs /dev/sdf || sudo mkfs -t xfs /dev/sdf

          echo "/dev/sdf /server/data xfs defaults,nofail 0 2" | sudo tee -a /etc/fstab
          mount -a
  DataVolumeAttachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: /dev/sdf
      InstanceId: !Ref Instance
      VolumeId: !Ref DataVolume
  ElasticIp:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref Instance
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.31.0.0/16
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1c
      CidrBlock: 172.31.0.0/16
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: true
  SshSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupName: SSH
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - CidrIpv6: "::/0"
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      - CidrIp: 0.0.0.0/0
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      SecurityGroupEgress:
        - CidrIp: 127.0.0.1/32
          IpProtocol: "-1"
  AmongUsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupName: Among Us
      GroupDescription: Among Us
      SecurityGroupIngress:
      - CidrIpv6: "::/0"
        FromPort: 22023
        IpProtocol: udp
        ToPort: 22023
      - CidrIp: 0.0.0.0/0
        FromPort: 22023
        IpProtocol: udp
        ToPort: 22023
      SecurityGroupEgress:
      - CidrIpv6: "::/0"
        FromPort: 22023
        IpProtocol: udp
        ToPort: 22023
      - CidrIp: 0.0.0.0/0
        FromPort: 22023
        IpProtocol: udp
        ToPort: 22023
  EgressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupName: Egress
      GroupDescription: Egress
      SecurityGroupEgress:
        - CidrIpv6: "::/0"
          IpProtocol: "-1"
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
  RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z24MJMG74F2S94
      Name: "amongus.shepherdjerred.com"
      Type: A
      TTL: 60
      ResourceRecords:
        - !Ref ElasticIp
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc
  InternetGatewayIpv4Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  InternetGatewayIpv6Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationIpv6CidrBlock: "::/0"
      GatewayId:
        Ref: InternetGateway
  RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet
